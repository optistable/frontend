/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  MockDataProvider,
  MockDataProviderInterface,
} from "../MockDataProvider";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_addr",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_price",
        type: "uint256",
      },
    ],
    name: "forcePrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_srcAddress",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_targetAddress",
        type: "bytes32",
      },
    ],
    name: "getCurrentPrices",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "priceMap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6103b78061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806345c412b914610067578063715018a61461007c5780638da5cb5b14610084578063b7961b87146100a4578063c8507cbd146100cc578063f2fde38b146100fa575b600080fd5b61007a610075366004610316565b61010d565b005b61007a610127565b6000546040516001600160a01b0390911681526020015b60405180910390f35b6100b76100b2366004610316565b61013b565b6040805192835260208301919091520161009b565b6100ec6100da366004610338565b60016020526000908152604090205481565b60405190815260200161009b565b61007a610108366004610351565b6101f3565b61011561026c565b60009182526001602052604090912055565b61012f61026c565b61013960006102c6565b565b600082815260016020526040808220548383529082205482919081830361019f5760405162461bcd60e51b81526020600482015260136024820152721cdc98c81c1c9a58d9481b9bdd08199bdd5b99606a1b60448201526064015b60405180910390fd5b806000036101e85760405162461bcd60e51b81526020600482015260166024820152751d185c99d95d081c1c9a58d9481b9bdd08199bdd5b9960521b6044820152606401610196565b909590945092505050565b6101fb61026c565b6001600160a01b0381166102605760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610196565b610269816102c6565b50565b6000546001600160a01b031633146101395760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610196565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806040838503121561032957600080fd5b50508035926020909101359150565b60006020828403121561034a57600080fd5b5035919050565b60006020828403121561036357600080fd5b81356001600160a01b038116811461037a57600080fd5b939250505056fea264697066735822122085f4b20555a9a13203f421dd9b7944dc874f43edf00c6a64b41a52d9818f592b64736f6c63430008130033";

type MockDataProviderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockDataProviderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockDataProvider__factory extends ContractFactory {
  constructor(...args: MockDataProviderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockDataProvider & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockDataProvider__factory {
    return super.connect(runner) as MockDataProvider__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockDataProviderInterface {
    return new Interface(_abi) as MockDataProviderInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockDataProvider {
    return new Contract(address, _abi, runner) as unknown as MockDataProvider;
  }
}
