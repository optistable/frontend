/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface StablecoinInsuranceManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "activatePolicy"
      | "cancelPolicy"
      | "createPolicy"
      | "getPolicy"
      | "policies"
      | "policyIsDepegged"
      | "recordPolicyDepeg"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activatePolicy",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelPolicy",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createPolicy",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPolicy",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "policies", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "policyIsDepegged",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recordPolicyDepeg",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "activatePolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPolicy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "policies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "policyIsDepegged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordPolicyDepeg",
    data: BytesLike
  ): Result;
}

export interface StablecoinInsuranceManager extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: StablecoinInsuranceManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  activatePolicy: TypedContractMethod<
    [policyId: BytesLike],
    [void],
    "nonpayable"
  >;

  cancelPolicy: TypedContractMethod<
    [policyId: BytesLike],
    [void],
    "nonpayable"
  >;

  createPolicy: TypedContractMethod<
    [
      _insuredToken: AddressLike,
      _insurerToken: AddressLike,
      _policyManagerContract: AddressLike,
      _premiumAmount: BigNumberish,
      _insuredAmount: BigNumberish,
      _policyTermInSeconds: BigNumberish,
      _depegTermInSeconds: BigNumberish
    ],
    [string],
    "payable"
  >;

  getPolicy: TypedContractMethod<[policyId: BytesLike], [string], "view">;

  policies: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  policyIsDepegged: TypedContractMethod<
    [_policyId: BytesLike],
    [boolean],
    "view"
  >;

  recordPolicyDepeg: TypedContractMethod<
    [policyId: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "activatePolicy"
  ): TypedContractMethod<[policyId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelPolicy"
  ): TypedContractMethod<[policyId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createPolicy"
  ): TypedContractMethod<
    [
      _insuredToken: AddressLike,
      _insurerToken: AddressLike,
      _policyManagerContract: AddressLike,
      _premiumAmount: BigNumberish,
      _insuredAmount: BigNumberish,
      _policyTermInSeconds: BigNumberish,
      _depegTermInSeconds: BigNumberish
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getPolicy"
  ): TypedContractMethod<[policyId: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "policies"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "policyIsDepegged"
  ): TypedContractMethod<[_policyId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "recordPolicyDepeg"
  ): TypedContractMethod<[policyId: BytesLike], [void], "nonpayable">;

  filters: {};
}
