/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface StablecoinInsurancePolicyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "activatePolicy"
      | "cancelPolicy"
      | "insuredDeposit"
      | "insurerDeposit"
      | "isDepegged"
      | "recordDepeg"
      | "setDataProvider"
      | "withdrawPremium"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activatePolicy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelPolicy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "insuredDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "insurerDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isDepegged",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recordDepeg",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDataProvider",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPremium",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "activatePolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insuredDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insurerDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isDepegged", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recordDepeg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDataProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPremium",
    data: BytesLike
  ): Result;
}

export interface StablecoinInsurancePolicy extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: StablecoinInsurancePolicyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  activatePolicy: TypedContractMethod<[], [void], "nonpayable">;

  cancelPolicy: TypedContractMethod<[], [void], "nonpayable">;

  insuredDeposit: TypedContractMethod<[], [void], "payable">;

  insurerDeposit: TypedContractMethod<[], [void], "payable">;

  isDepegged: TypedContractMethod<[], [boolean], "view">;

  recordDepeg: TypedContractMethod<[], [void], "nonpayable">;

  setDataProvider: TypedContractMethod<
    [_newDataProvider: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawPremium: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "activatePolicy"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelPolicy"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "insuredDeposit"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "insurerDeposit"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "isDepegged"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "recordDepeg"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDataProvider"
  ): TypedContractMethod<[_newDataProvider: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawPremium"
  ): TypedContractMethod<[], [void], "nonpayable">;

  filters: {};
}
